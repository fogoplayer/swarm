#Prbably only being used until Nik commits server files
#(But I don't get how python handles multiple files sooooooo)
import time
import math
import algorithm as a

#Occupant Class-----------------------------------------------------------------
class Occupant:
    carColor = ""
    carType = "";
    nextInstruction = "";
    waitedForNCars = 0;
    
    def __init__(self, carColor, carType):
        self.carColor = carColor;
        self.carType = carType;

#Spot Class
class Spot:
    parent = None
    occupantID = None
    children = []
    
    def __init__(self, parent, occupantID, children):
        self.parent = parent
        self.occupantID = occupantID
        self.children = children
    
    
#Lot----------------------------------------------------------------------------
virtualLot = [
                ["               ", "               ", Spot(None, None), "               "],
                [Spot([1,1], None), Spot([1,2], None), Spot([0,3], None]), Spot([1,3], None)],
                [Spot([1,0], None), Spot([2,0], None), Spot([2,3], None), Spot([1,3], None)],
                [Spot([2,0], None), Spot([3,0], None), Spot([3,3], None), Spot([2,3], None)],
                [Spot([3,0], None), Spot([4,0], None), Spot([4,3], None), Spot([3,3], None)],
                [Spot([4,0], None), "               ", "               ", Spot([4,3], None)]
        ];
occupants = []

def initializeLot(array):
        '''Takes an array representing a test lot and populates the virtualLot'''
        arrayIndex = 0
        index = 0;
        global occupants;
        for y in virtualLot:
                for x in y:
                        if x.has_key("nextCell") and (x["nextCell"] != None):
                                if (array[arrayIndex]):
                                        x["occupantId"] = index;
                                        occupants += [Occupant("blue", "sedan")]
                                else:
                                        x["occupantId"] = None;
                                arrayIndex += 1;
                                index += 1;
        for i in range(0,6):
            print(virtualLot[i]);

#Test suite---------------------------------------------------------------------
lotsExecuted = 0.0;

#Generate lots to put into the algorithm
def test(array):
    if len(array) < 18:
        time.sleep(.001)
        test(array + [True]);
        test(array + [False]);
    else:
        #if array is complete, execute algorithm
        runAlgorithm(array)
        #time.sleep(1)

#Run lots generated by test()
def runAlgorithm(array):
    initializeLot(array);
    a.main(virtualLot, occupants)
    #Print out % completion through all permutations and the list of parking space states
    global lotsExecuted;
    lotsExecuted += 1
    print(str(format((lotsExecuted/262144.0 * 100.0), '.6f')) + "%\t Combination " + str(lotsExecuted) + "\t" + str(array) + "\n")

#Run test suite
def runTest():
    startTime = time.time();
    test([]);
    endTime = time.time();
    print('Time Elapsed: ' + str(endTime - startTime) + " sec (" + str((endTime - startTime)/60) + " min)");